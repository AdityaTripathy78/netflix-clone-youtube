{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","Screens/HomeScreen.js","firebase.js","Screens/SignupScreen.js","Screens/LoginScreen.js","features/userSlice.js","Screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","title","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","name","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e7f4a14.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    //baseURL:\"https://www.themoviedb.org/documentation/api\"\r\n    baseURL : \"https://api.themoviedb.org/3/\"\r\n})\r\n\r\nexport default instance;","\r\n//Typically we would store in {process.env.API_KEY}\r\nconst API_KEY=\"0a0b36bf020cdbebedcc56cb326bebfa\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-us`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n\r\n    \r\n}\r\n\r\nexport default requests;\r\n\r\n//\"https://api.themoviedb.org/3/trending/all/week?api_key=0a0b36bf020cdbebedcc56cb326bebfa&language=en-us\"","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport './Banner.css'\r\nimport requests from \"./Requests\";\r\n\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request =await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    console.log(movie);\r\n\r\n    function truncate(string, n){\r\n        return string?.length >n ? string.substr(0,n-1) + '...' : string;\r\n    }\r\n    return (\r\n        <header\r\n         className=\"banner\"\r\n         style={{\r\n             backgroundSize:\"cover\",\r\n             backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n             backgroundPosition: \"center center\",\r\n\r\n         }}\r\n            \r\n        >\r\n            <div className=\"banner__contents\">\r\n            <h1 className=\"banner__title\">Movie Name</h1>\r\n            <div className=\"banner__buttons\">\r\n                <button className=\"banner__button\">Play</button>\r\n                <button className=\"banner__button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner__description\">\r\n                {truncate(`This is a test description This is a test description`,150)}</h1>\r\n            </div>\r\n\r\n\r\n         <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\nconst [show, handleShow] = useState(false);\r\nconst history = useHistory();\r\n\r\nconst transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n        handleShow(true);\r\n    }else {\r\n        handleShow(false);\r\n\r\n    }\r\n    \r\n}\r\n\r\nuseEffect(() => {\r\nwindow.addEventListener(\"scroll\", transitionNavBar)\r\nreturn () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n} , []);\r\n    \r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`} >\r\n            <div className='nav__contents'>\r\n            <img \r\n            onClick={() => history.push('/')}\r\n            className='nav__logo'\r\n            src=\"https://i1.wp.com/freepngimages.com/wp-content/uploads/2016/10/netflix-logo.png?fit=895%2C559\" \r\n            alt=\"\"\r\n            />\r\n\r\n            <img \r\n            onClick={() => history.push('/profile')}\r\n            className='nav__avatar'\r\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" \r\n            alt=\"\"\r\n            />\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from './axios';\r\nimport \"./Row.css\";\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction Row({ title ,fetchUrl, isLargeRow =false}) {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request =await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    console.log(movies);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n\r\n            {movies.map(movie => (\r\n                ((isLargeRow && movie.poster_path )|| \r\n                (!isLargeRow && movie.backdrop_path)) && (\r\n\r\n                <img \r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                    isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`} \r\n                alt={movie.name}\r\n                />\r\n                ))\r\n            )}\r\n            \r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Banner from '../Banner';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from '../Nav';\r\nimport requests from '../Requests';\r\nimport Row from '../Row';\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n        {/* Nav */}\r\n        <Nav />\r\n\r\n        {/* Banner */}\r\n        <Banner />\r\n\r\n        {/* Row */}\r\n        <Row \r\n            title ='NETFLIX ORIGINALS'\r\n            fetchUrl={requests.fetchNetflixOriginals}\r\n            isLargeRow\r\n            />\r\n            <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n            <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBNXkl0tWACVzTfQAHOlGdBccVonoo8i_0\",\r\n    authDomain: \"netflix-clone-819c7.firebaseapp.com\",\r\n    projectId: \"netflix-clone-819c7\",\r\n    storageBucket: \"netflix-clone-819c7.appspot.com\",\r\n    messagingSenderId: \"1042066065349\",\r\n    appId: \"1:1042066065349:web:dd6dde8ef6bb471a266dac\",\r\n    measurementId: \"G-29851055ZC\"\r\n  };\r\n\r\n  const initializeApp = firebase.initializeApp(firebaseConfig);\r\n  const db = initializeApp.firestore();\r\n  const auth = firebase.auth();\r\n\r\n  console.log(auth)\r\n  export {auth};\r\n  export default db;\r\n","import React, { useRef } from 'react'\r\nimport { auth } from '../firebase';\r\nimport \"./SignupScreen.css\"\r\n\r\nfunction SignupScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n\r\n        ) .then((authUser) => {\r\n                console.log(authUser);\r\n\r\n        })\r\n            .catch((error) => {\r\n            alert(error.message);\r\n\r\n        })\r\n    }\r\n    const signIn = (e) => {\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n\r\n        ) .then((authUser) => {\r\n                console.log(authUser);\r\n\r\n        })\r\n            .catch((error) => alert(error.message));\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"sinupScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\"/>\r\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\r\n                <button type=\"submit\" onClick={signIn}>Sign In</button>\r\n                <h4>\r\n                    <span className=\"signupScreen__gray\">New to Netflix?</span>\r\n                    <span className=\"signupScreen__link\" onClick={register}> Sign Up now.</span>\r\n                </h4>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignupScreen\r\n","import React, { useState } from 'react'\r\nimport './LoginScreen.css'\r\nimport SignupScreen from './SignupScreen';\r\n\r\nfunction LoginScreen() {\r\nconst [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className = \"loginScreen\">\r\n            <div className=\"loginScreen__background\">\r\n\r\n                <img\r\n                    className=\"loginScreen__logo\" \r\n                    src=\"https://i1.wp.com/freepngimages.com/wp-content/uploads/2016/10/netflix-logo.png?fit=895%2C559\"\r\n                    alt=\"\"\r\n                />\r\n                <button onClick={() => setSignIn(true)}\r\n                className = \"loginScreen__button\">Sign In</button>\r\n\r\n                <div className=\"loginScreen_gradient\" />\r\n                \r\n            </div>\r\n\r\n\r\n            <div className=\"loginScreen__body\">\r\n                {signIn ? (\r\n                    <SignupScreen />\r\n                ) : ( \r\n<>\r\n\r\n                    <h1>Unlimited films ,TV programmes and more.</h1>\r\n                    <h2>watch anywhere. Cancel at any time</h2>\r\n                    <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n                    <div className=\"loginScreen__input\">\r\n                    <form>\r\n                        <input type=\"email\" placeholder=\"Email Address\"/>\r\n                        <button \r\n                        onClick={() => setSignIn(true)}\r\n                        className=\"loginScreen__getStarted\">GET STARTED</button>\r\n                    </form>\r\n                </div>\r\n                </>\r\n    \r\n\r\n                )}\r\n\r\n                \r\n\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    // increment: state => {\r\n    //   // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n    //   // doesn't actually mutate the state because it uses the Immer library,\r\n    //   // which detects changes to a \"draft state\" and produces a brand new\r\n    //   // immutable state based off those changes\r\n    //   state.value += 1;\r\n    // },\r\n    // decrement: state => {\r\n    //   state.value -= 1;\r\n    // },\r\n    // incrementByAmount: (state, action) => {\r\n    //   state.value += action.payload;\r\n    // },\r\n    login: (state ,action) => {\r\n      state.user = action.payload;\r\n\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n\r\n  },\r\n});\r\n\r\nexport const { login , logout } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n//===============================\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n//==============================\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../features/userSlice'\r\nimport { auth } from '../firebase'\r\nimport Nav from '../Nav'\r\nimport './ProfileScreen.css'\r\n\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser);\r\n\r\n    return (\r\n        <div className=\"profileScreen\">\r\n            <Nav />\r\n            <div className=\"profileScreen__body\">\r\n                <h1>Edit Profile</h1>\r\n                <div className = \"profileScreen__info\">\r\n                    <img \r\n                    src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" \r\n                    alt=\"\"\r\n                    />\r\n                    <div className = \"profileScreen__details\">\r\n                        <h2>{user.email}</h2>\r\n                        <div className = \"profileScreen__plans\">\r\n                            <h3>Plans</h3>\r\n                            <button \r\n                            onClick = {() => auth.signOut()}\r\n                            className=\"profileScreen__signout\">Sign Out</button>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React, { useEffect } from 'react';\r\n//import logo from './logo.svg';\r\n//import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport HomeScreen from './Screens/HomeScreen';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport LoginScreen from './Screens/LoginScreen';\r\nimport { auth } from './firebase';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login, logout, selectUser } from './features/userSlice';\r\nimport ProfileScreen from './Screens/ProfileScreen';\r\n\r\n\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe =  auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        //Logged in\r\n        console.log(userAuth);\r\n        dispatch(login({\r\n          uid : userAuth.uid,\r\n          email: userAuth.email,\r\n\r\n        }));\r\n      }else{\r\n        //Logged out\r\n        dispatch(logout());\r\n      }\r\n      \r\n    })\r\n\r\n    return unsubscribe;\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Router>\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n      {!user ? (\r\n              <LoginScreen />\r\n        ) :(\r\n          <Switch>\r\n          <Route path='/profile'>\r\n              <ProfileScreen />\r\n          </Route>\r\n          <Route path=\"/\">\r\n              <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n            )}\r\n        \r\n    </Router>\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n//import counterReducer from '../features/counter/counterSlice';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer, \r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}